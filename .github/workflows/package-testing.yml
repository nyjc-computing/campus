# Package Testing Workflow
#
# This workflow tests the campus-suite package and ensures it can be built
# and imported correctly with different feature sets.
#
# CRITICAL LESSONS LEARNED:
# 
# 1. POETRY PYTHON VERSION CONFLICT:
#    Problem: Poetry was failing with "Command returned non-zero exit status 1" 
#    when trying to create virtual environments. This happened because Poetry 
#    was trying to use its own Python installation instead of the system Python.
#    
#    Solution: Always configure Poetry with:
#      poetry config virtualenvs.use-poetry-python false
#      poetry config virtualenvs.create true
#    
#    This ensures Poetry uses the Python version from actions/setup-python@v5
#    instead of trying to use Poetry's bundled Python.

name: Package Testing

on:
  push:
    branches: [main]  # Only run on main branch pushes
  pull_request:
    branches: [main, staging]  # Run on PRs targeting main

jobs:
  # Test package build and installation with different feature sets
  build-and-test:
    runs-on: ubuntu-latest
    env:
      ENV: testing
      CLIENT_ID: test-client-id
      CLIENT_SECRET: test-client-secret
    # No extras matrix needed
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.use-poetry-python false
          poetry config virtualenvs.create true
          
      - name: Build package
        run: |
          echo "üì¶ Building campus-suite..."
          poetry install
          poetry build
          echo "‚úÖ Successfully built campus-suite"
          
      - name: Test imports
        run: |
          # Test core package and all modules
          poetry run python -c "import campus; import campus.vault; import campus.apps; import campus.models; import campus.storage; print('‚úÖ All modules import successfully')"
          
      - name: Verify package artifacts
        run: |
          ls -la dist/
          echo "üìã Package files created:"
          find dist/ -name "*.whl" -o -name "*.tar.gz"


  # Summary job
  package-testing-summary:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: always()
    
    steps:
      - name: Check all package tests
        run: |
          echo "üìä Package Testing Summary:"
          echo "‚úÖ Build and test: ${{ needs.build-and-test.result }}"
          if [[ "${{ needs.build-and-test.result }}" != "success" ]]; then
            echo "‚ùå Some package tests failed"
            exit 1
          else
            echo "üéâ All package tests passed!"
          fi
