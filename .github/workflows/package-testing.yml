# Package Testing Workflow
#
# This workflow tests the campus subpackage architecture to ensure all packages
# can be built and imported correctly in isolation and with their dependencies.
#
# CRITICAL LESSONS LEARNED:
# 
# 1. POETRY PYTHON VERSION CONFLICT:
#    Problem: Poetry was failing with "Command returned non-zero exit status 1" 
#    when trying to create virtual environments. This happened because Poetry 
#    was trying to use its own Python installation instead of the system Python.
#    
#    Solution: Always configure Poetry with:
#      poetry config virtualenvs.use-poetry-python false
#      poetry config virtualenvs.create true
#    
#    This ensures Poetry uses the Python version from actions/setup-python@v5
#    instead of trying to use Poetry's bundled Python.
#
# 2. DEPENDENCY BUILD ORDER:
#    Problem: The original matrix strategy tried to build all packages in parallel,
#    but packages with path dependencies (like storage depending on vault and common)
#    would fail because their dependencies hadn't been built yet.
#    
#    Solution: Structure jobs in dependency order:
#    - build-independent-packages: common (no dependencies)
#    - build-dependent-packages: vault, client, models (depend on common)  
#    - build-storage-packages: storage (depends on vault + common)
#    - build-final-packages: apps, workspace (depend on multiple others)
#
# 3. PYTHON IMPORT SHADOWING:
#    Problem: The storage package has a 'collections' subdirectory that shadows
#    Python's built-in 'collections' module, causing import failures when Python
#    tries to import standard library modules.
#    
#    Root Cause: When Python is in /campus/storage/ directory and tries to import
#    'collections', it finds the local ./collections/ directory first instead of
#    the standard library collections module.
#    
#    Temporary Solution: This workflow now builds dependencies in the right order
#    to work around the issue. 
#    
#    Permanent Solution: The 'collections' directory should be renamed to avoid
#    shadowing (e.g., 'document_collections' or 'storage_collections'). This
#    structural change should be done through the main branch to avoid conflicts.
#
# 4. PATH DEPENDENCY RESOLUTION:
#    Each package uses path dependencies like:
#      campus-common = {path = "../common", develop = true}
#    
#    These require the dependency packages to be built first, which is why
#    the sequential job structure is necessary.

name: Package Testing

on:
  push:
    branches: [main]  # Only run on main branch pushes
  pull_request:
    branches: [main, staging]  # Run on PRs targeting main

jobs:
  # First, test that packages can be built in dependency order
  build-independent-packages:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ["common"]  # Packages with no dependencies
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.use-poetry-python false
          poetry config virtualenvs.create true
          
      - name: Test package build - ${{ matrix.package }}
        run: |
          cd campus/${{ matrix.package }}
          echo "üì¶ Building campus-${{ matrix.package }}..."
          poetry install
          poetry build
          echo "‚úÖ Successfully built campus-${{ matrix.package }}"
          
      - name: Verify package contents
        run: |
          cd campus/${{ matrix.package }}
          ls -la dist/
          echo "ÔøΩ Package files created:"
          find dist/ -name "*.whl" -o -name "*.tar.gz"

  # Build packages that depend on common
  build-dependent-packages:
    runs-on: ubuntu-latest
    needs: build-independent-packages
    strategy:
      matrix:
        package: ["vault", "client", "models"]  # Packages that depend on common
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.use-poetry-python false
          poetry config virtualenvs.create true
          
      - name: Build dependencies
        run: |
          # Build common first
          cd campus/common
          poetry install
          poetry build
          cd ../..
          
      - name: Test package build - ${{ matrix.package }}
        run: |
          cd campus/${{ matrix.package }}
          echo "üì¶ Building campus-${{ matrix.package }}..."
          poetry install
          poetry build
          echo "‚úÖ Successfully built campus-${{ matrix.package }}"
          
      - name: Verify package contents
        run: |
          cd campus/${{ matrix.package }}
          ls -la dist/
          echo "ÔøΩ Package files created:"
          find dist/ -name "*.whl" -o -name "*.tar.gz"

  # Build packages that depend on vault
  build-storage-packages:
    runs-on: ubuntu-latest
    needs: build-dependent-packages
    strategy:
      matrix:
        package: ["storage"]  # Packages that depend on vault
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.use-poetry-python false
          poetry config virtualenvs.create true
          
      - name: Build dependencies
        run: |
          # Build common first
          cd campus/common
          poetry install
          poetry build
          cd ../..
          
          # Build vault
          cd campus/vault  
          poetry install
          poetry build
          cd ../..
          
      - name: Test package build - ${{ matrix.package }}
        run: |
          cd campus/${{ matrix.package }}
          echo "üì¶ Building campus-${{ matrix.package }}..."
          poetry install
          poetry build
          echo "‚úÖ Successfully built campus-${{ matrix.package }}"
          
      - name: Verify package contents
        run: |
          cd campus/${{ matrix.package }}
          ls -la dist/
          echo "üìã Package files created:"
          find dist/ -name "*.whl" -o -name "*.tar.gz"

  # Build packages that depend on everything
  build-final-packages:
    runs-on: ubuntu-latest
    needs: [build-dependent-packages, build-storage-packages]
    strategy:
      matrix:
        package: ["apps", "workspace"]  # Packages that depend on multiple others
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.use-poetry-python false
          poetry config virtualenvs.create true
          
      - name: Build all dependencies
        run: |
          # Build in dependency order
          cd campus/common
          poetry install && poetry build
          cd ../vault
          poetry install && poetry build
          cd ../client
          poetry install && poetry build
          cd ../models
          poetry install && poetry build
          cd ../storage
          poetry install && poetry build
          cd ../..
          
      - name: Test package build - ${{ matrix.package }}
        run: |
          cd campus/${{ matrix.package }}
          echo "üì¶ Building campus-${{ matrix.package }}..."
          poetry install
          poetry build
          echo "‚úÖ Successfully built campus-${{ matrix.package }}"

  # Test package imports work in isolation
  test-package-imports:
    runs-on: ubuntu-latest
    needs: [build-independent-packages, build-dependent-packages, build-storage-packages, build-final-packages]
    strategy:
      matrix:
        package: ["common", "vault", "client"]  # Start with independent packages
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.use-poetry-python false
          poetry config virtualenvs.create true
          
      - name: Build dependencies for import test
        run: |
          # Build dependencies first
          cd campus/common
          poetry install && poetry build
          cd ../..
          if [[ "${{ matrix.package }}" == "vault" ]]; then
            cd campus/vault
            poetry install && poetry build
            cd ../..
          fi
          
      - name: Test isolated import - ${{ matrix.package }}
        run: |
          cd campus/${{ matrix.package }}
          poetry install
          cd ../..  # Move to project root so campus namespace is discoverable
          echo "üß™ Testing isolated import of campus.${{ matrix.package }}..."
          poetry run python -c "
          import sys
          try:
              import campus.${{ matrix.package }}
              print('‚úÖ Successfully imported campus.${{ matrix.package }}')
          except ImportError as e:
              print(f'‚ùå Failed to import campus.${{ matrix.package }}: {e}')
              sys.exit(1)
          "

  # Test dependency resolution across packages
  test-dependency-chain:
    runs-on: ubuntu-latest
    needs: [build-independent-packages, build-dependent-packages, build-storage-packages, build-final-packages]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.use-poetry-python false
          poetry config virtualenvs.create true
          
      - name: Test dependency chain
        run: |
          echo "üîó Testing dependency chain: vault ‚Üí storage ‚Üí apps"
          
          # Test vault (should only need common)
          cd campus/vault
          poetry install
          echo "‚úÖ campus-vault dependencies resolved"
          
          # Test storage (needs vault + common)
          cd ../storage
          poetry install
          echo "‚úÖ campus-storage dependencies resolved"
          
          # Test apps (needs all packages)
          cd ../apps
          poetry install
          echo "‚úÖ campus-apps dependencies resolved"
          
          echo "üéâ All dependency chains working!"

  # Integration test: verify the workspace package works
  test-workspace-integration:
    runs-on: ubuntu-latest
    needs: [build-independent-packages, build-dependent-packages, build-storage-packages, build-final-packages, test-package-imports]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.use-poetry-python false
          poetry config virtualenvs.create true
          
      - name: Test workspace package
        run: |
          cd campus/workspace
          poetry install
          echo "üè¢ Testing workspace integration..."
          poetry run python -c "
          import sys
          try:
              import campus.workspace
              print('‚úÖ campus.workspace imports successfully')
              
              # Test that individual modules are available
              import campus.common
              import campus.vault
              print('‚úÖ Individual modules accessible through workspace')
              
          except ImportError as e:
              print(f'‚ùå Workspace integration failed: {e}')
              sys.exit(1)
          "

  # Summary job that depends on all others
  package-testing-summary:
    runs-on: ubuntu-latest
    needs: [build-independent-packages, build-dependent-packages, build-storage-packages, build-final-packages, test-package-imports, test-dependency-chain, test-workspace-integration]
    if: always()
    
    steps:
      - name: Check all package tests
        run: |
          echo "üìä Package Testing Summary:"
          echo "‚úÖ Build independent packages: ${{ needs.build-independent-packages.result }}"
          echo "‚úÖ Build dependent packages: ${{ needs.build-dependent-packages.result }}"
          echo "‚úÖ Build storage packages: ${{ needs.build-storage-packages.result }}"
          echo "‚úÖ Build final packages: ${{ needs.build-final-packages.result }}"
          echo "‚úÖ Import tests: ${{ needs.test-package-imports.result }}"
          echo "‚úÖ Dependency chain: ${{ needs.test-dependency-chain.result }}"
          echo "‚úÖ Workspace integration: ${{ needs.test-workspace-integration.result }}"
          
          if [[ "${{ needs.build-independent-packages.result }}" != "success" || 
                "${{ needs.build-dependent-packages.result }}" != "success" || 
                "${{ needs.build-storage-packages.result }}" != "success" || 
                "${{ needs.build-final-packages.result }}" != "success" || 
                "${{ needs.test-package-imports.result }}" != "success" || 
                "${{ needs.test-dependency-chain.result }}" != "success" || 
                "${{ needs.test-workspace-integration.result }}" != "success" ]]; then
            echo "‚ùå Some package tests failed"
            exit 1
          else
            echo "üéâ All package tests passed!"
          fi
