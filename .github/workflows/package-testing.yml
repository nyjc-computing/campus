# Package Testing Workflow
#
# This workflow tests the campus-suite package and ensures it can be built
# and imported correctly with different feature sets.
#
# CRITICAL LESSONS LEARNED:
# 
# 1. POETRY PYTHON VERSION CONFLICT:
#    Problem: Poetry was failing with "Command returned non-zero exit status 1" 
#    when trying to create virtual environments. This happened because Poetry 
#    was trying to use its own Python installation instead of the system Python.
#    
#    Solution: Always configure Poetry with:
#      poetry config virtualenvs.use-poetry-python false
#      poetry config virtualenvs.create true
#    
#    This ensures Poetry uses the Python version from actions/setup-python@v5
#    instead of trying to use Poetry's bundled Python.

name: Package Testing

on:
  push:
    branches: [main]  # Only run on main branch pushes
  pull_request:
    branches: [main, staging]  # Run on PRs targeting main

jobs:
  # Test package build and installation with different feature sets
  build-and-test:
    runs-on: ubuntu-latest
    # No extras matrix needed
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.use-poetry-python false
          poetry config virtualenvs.create true
          
      - name: Build package
        run: |
          echo "üì¶ Building campus-suite..."
          poetry install
          poetry build
          echo "‚úÖ Successfully built campus-suite"
          
      - name: Test imports
        run: |
          # Test core package and all modules
          poetry run python -c "import campus; import campus.vault; import campus.apps; import campus.models; import campus.storage; print('‚úÖ All modules import successfully')"
          
      - name: Verify package artifacts
        run: |
          ls -la dist/
          echo "üìã Package files created:"
          find dist/ -name "*.whl" -o -name "*.tar.gz"

  # Test installing the package from git
  test-git-install:
    needs: build-and-test
    runs-on: ubuntu-latest
    # No extras matrix needed

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.use-poetry-python false
          poetry config virtualenvs.create true
          
      - name: Create test project and add package from git
        run: |
          mkdir test-project
          cd test-project
          poetry init --name=test-project --description="Test project" --author="Test <test@example.com>" --python="^3.11" --no-interaction
          # Add the main package from git (auto-detect name from repo if possible)
          # Try campus-suite, fallback to campus if needed
          if ! poetry add "campus-suite@git+$GITHUB_SERVER_URL/$GITHUB_REPOSITORY.git@$GITHUB_SHA"; then
            poetry add "campus@git+$GITHUB_SERVER_URL/$GITHUB_REPOSITORY.git@$GITHUB_SHA"
          fi

      - name: Test installation and imports
        run: |
          cd test-project
          poetry install
          # Test core package and all modules
          python -c "import campus; import campus.vault; import campus.apps; import campus.models; import campus.storage"

  # Summary job
  package-testing-summary:
    runs-on: ubuntu-latest
    needs: [build-and-test, test-git-install]
    if: always()
    
    steps:
      - name: Check all package tests
        run: |
          echo "üìä Package Testing Summary:"
          echo "‚úÖ Build and test: ${{ needs.build-and-test.result }}"
          echo "‚úÖ Git installation: ${{ needs.test-git-install.result }}"
          
          if [[ "${{ needs.build-and-test.result }}" != "success" || 
                "${{ needs.test-git-install.result }}" != "success" ]]; then
            echo "‚ùå Some package tests failed"
            exit 1
          else
            echo "üéâ All package tests passed!"
          fi
